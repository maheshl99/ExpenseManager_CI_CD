# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
#  lint-check:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: Run Lint
#        run: ./gradlew lintDebug
#
#      - name: Upload html test report
#        uses: actions/upload-artifact@v2
#        with:
#          name: lint.html
#          path: app/build/reports/lint-results-debug.html
#
#  unit-test:
#    needs: [ lint-check ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: Run tests
#        run: ./gradlew test
#
#      - name: Upload test report
#        uses: actions/upload-artifact@v2
#        with:
#          name: unit_test_report
#          path: app/build/reports/tests/testDebugUnitTest/

#  instrumentation-test:
#    needs: [ unit-test ]
#    runs-on: macos-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: Run espresso tests
#        uses: reactivecircus/android-emulator-runner@v2
#        with:
#          api-level: 29
#          script: ./gradlew connectedCheck
#
#      - name: Upload test report
#        uses: actions/upload-artifact@v2
#        with:
#          name: instrumentation_test_report
#          path: app/build/reports/androidTests/connected/

  code-coverage-check:
#    needs: [ instrumentation-test ]
    runs-on: macos-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up our JDK environment
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Cache Gradle and wrapper
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Decode Google services configuration file from secrets
      # - name: Decode google-services.json
      #  env:
      #    FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
      #  run: echo $FIREBASE_CONFIG > app/google-services.json

      # Run emulator
      - name: Run integration test on emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew createDebugCoverageReport --stacktrace

      # Generate jacoco report
      - name: Generate report
        run: ./gradlew jacoocoTestReport

      # Upload report
      - name: Upload Reports
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: code_coverage_reports
          path: app/build/reports/coverage/

      # Upload coverage report to Codacy
#      - name: Run codacy-coverage-reporter
#        uses: codacy/codacy-coverage-reporter-action@v1
#        with:
#          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}

#  static-code-analysis:
#    needs: [ code-coverage-check ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11
#
#      - name: SonarCloud Scan
#        run: ./gradlew app:sonarqube -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  package:
#    needs: [ static-code-analysis ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: set up JDK 1.8
#        uses: actions/setup-java@v1
#        with:
#          java-version: 1.8
#
#      - name: Build debug APK
#        run: ./gradlew assembleDebug --stacktrace
#
#      - name: Upload APK
#        uses: actions/upload-artifact@v2
#        with:
#          name: expense-manager.apk
#          path: app/build/outputs/apk/debug/app-debug.apk
#
#  deploy:
#    needs: [ package ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: set up JDK 1.8
#        uses: actions/setup-java@v1
#        with:
#          java-version: 1.8
#
#      - name: Make gradlew executable
#        run: chmod +x ./gradlew
#
#      - name: Build debug APK
#        run: ./gradlew assembleDebug --stacktrace
#
#      - name: Upload artifact to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          appId: ${{secrets.FIREBASE_APP_ID}}
#          token: ${{secrets.FIREBASE_TOKEN}}
#          groups: test-team
#          releaseNotesFile: app/release_notes.txt
#          file:  app/build/outputs/apk/debug/app-debug.apk